[gcode_macro LINEAR_HEATER_CONTROL]
description: Linearly changes the heater temperature at specified rate. Useful for releasing part stress and preventing warping during bed cooldown.
variable_is_running: 0
variable_heater_name: ""
variable_initial_temp: 0
variable_ending_temp: 0
variable_early_abort_cooling_temp_delta: 0
variable_loop_count: 0
variable_i: 0
variable_refresh_time: 0
variable_last_control_target_temp: 0
gcode:
  #Input arguements
  {% set heater_name = params.HEATER if params.HEATER in printer.heaters.available_heaters else "heater_bed" %} # string - name of the heater - Default "heater_bed"
  {% set ending_temp = params.TARGET | default(0) | float %} # [C] - Control stops at this temp - Default 0
  {% set transition_rate = params.TRANSITION_RATE | default(1.3) | float | abs %} # [deg C / min] - Target Temperature Rate of change - Default 1.3 (~1h for 110C-->30C)
  {% set early_abort_cooling_temp_delta = params.COOLING_ABORT_DELTA | default(1.5) | float | abs %} # [C] - Abort cooling delta is exceeded - Default 1.5
  {% set refresh_time = params.REFRESH_TIME | default(5) | float | abs %} # [S] - How ofted the control is updated - Default 5

  #Perform Input Parameter Validity Check TODO Make it better
  {% set invalid_input_params = false %}
  {% if heater_name not in printer.heaters.available_heaters %}
      RESPOND PREFIX="INFO: " MSG="The requested heater does not exist!"
      {% set invalid_input_params = true %}
  {% endif %}

  #Determine starting temps
  {% set initial_temp = printer[heater_name].temperature %}

  #Calculate relevant parameters
  {% set cycle_delta_temp = transition_rate*refresh_time/60 %}
  {% set loop_count = ((initial_temp-ending_temp)/cycle_delta_temp) | abs | round(method='ceil') | int%} #number of loops needed 
  {% set is_cooling = ending_temp < initial_temp %}

  #If currently running stop the previous control
  UPDATE_DELAYED_GCODE ID=_DELAYED_LINEAR_HEATER_CONTROL DURATION=0
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=is_running VALUE={false}

  #Update the configuration related variables
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=heater_name VALUE='"{heater_name}"'
  
  #Update the temperature related variables
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=initial_temp VALUE={initial_temp}
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=ending_temp VALUE={ending_temp}
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=early_abort_cooling_temp_delta VALUE={early_abort_cooling_temp_delta}

  #Update the loop related variables
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=loop_count VALUE={loop_count}
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=i VALUE={0}
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=refresh_time VALUE={refresh_time}
  SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=last_control_target_temp VALUE={0}

  #Start the Control
  RESPOND PREFIX="" MSG="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  RESPOND PREFIX="" MSG="Linear Heater Control Initiated"
  RESPOND PREFIX="-" MSG="Heater: {heater_name}"
  RESPOND PREFIX="-" MSG="Initial Temperature: {initial_temp} [C]"
  RESPOND PREFIX="-" MSG="Ending Temperature:  {ending_temp} [C]"
  RESPOND PREFIX="-" MSG="Temperature Transition Rate: {transition_rate} [Deg. C/min] "
  RESPOND PREFIX="-" MSG="Natural Cooling Abort Delta: {early_abort_cooling_temp_delta} [C] "
  RESPOND PREFIX="" MSG="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  UPDATE_DELAYED_GCODE ID=_DELAYED_LINEAR_HEATER_CONTROL DURATION=0.001
  
[delayed_gcode _DELAYED_LINEAR_HEATER_CONTROL]
gcode:
  #Grab/Calculate variables
  {% set is_running = printer["gcode_macro LINEAR_HEATER_CONTROL"].is_running %}
  {% set heater_name = printer["gcode_macro LINEAR_HEATER_CONTROL"].heater_name %}
  {% set initial_temp = printer["gcode_macro LINEAR_HEATER_CONTROL"].initial_temp %}
  {% set ending_temp = printer["gcode_macro LINEAR_HEATER_CONTROL"].ending_temp %}
  {% set early_abort_cooling_temp_delta = printer["gcode_macro LINEAR_HEATER_CONTROL"].early_abort_cooling_temp_delta %}
  {% set loop_count = printer["gcode_macro LINEAR_HEATER_CONTROL"].loop_count %}
  {% set i = printer["gcode_macro LINEAR_HEATER_CONTROL"].i %}
  {% set refresh_time = printer["gcode_macro LINEAR_HEATER_CONTROL"].refresh_time %}
  {% set last_control_target_temp = printer["gcode_macro LINEAR_HEATER_CONTROL"].last_control_target_temp %}
  {% set current_temp = printer[heater_name].temperature %}
  {% set current_target = initial_temp + ((i+1)/loop_count) * (ending_temp - initial_temp)%}
  {% set is_cooling = ending_temp < initial_temp %}

  #Perform the Required Checks/Actions
  {% if is_running and last_control_target_temp != printer[heater_name].target %}

    #The User Changed the Temperature after control has started --> Abort
    UPDATE_DELAYED_GCODE ID=_DELAYED_LINEAR_HEATER_CONTROL DURATION=0
    SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=is_running VALUE={false}
    RESPOND PREFIX="INFO: " MSG="Linear Heater Control Aborted - User Changed Temperature"

  {% elif is_running and is_cooling and (current_temp - last_control_target_temp >= early_abort_cooling_temp_delta)%}

    #Natural cooling is meeting the requirement --> Abort
    SET_HEATER_TEMPERATURE HEATER={heater_name} TARGET={ending_temp}
    UPDATE_DELAYED_GCODE ID=_DELAYED_LINEAR_HEATER_CONTROL DURATION=0
    SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=is_running VALUE={false}
    RESPOND PREFIX="INFO: " MSG="Linear Heater Control Aborted - Natural Cooling Sufficient"

  {% else %}

    #Perform the next control step

    #Initial call update the status not running --> running
    {% if not is_running %}
      SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=is_running VALUE={true}
    {% endif %}
    
    #Proceed with Temperature adjustment
    SET_HEATER_TEMPERATURE HEATER={heater_name} TARGET={current_target}
    SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=last_control_target_temp VALUE={current_target}

    #Schedule action or finish
    {% if i + 1 < loop_count %}
      #Schedule the next action
      SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=i VALUE={i+1}
      UPDATE_DELAYED_GCODE ID=_DELAYED_LINEAR_HEATER_CONTROL DURATION={refresh_time}
    {% else %}
      #Finshed
      UPDATE_DELAYED_GCODE ID=_DELAYED_LINEAR_HEATER_CONTROL DURATION=0
      SET_GCODE_VARIABLE MACRO=LINEAR_HEATER_CONTROL VARIABLE=is_running VALUE={false}
      RESPOND PREFIX="INFO: " MSG="Linear Heater Control Finished"
    {% endif %}

  {% endif %}
